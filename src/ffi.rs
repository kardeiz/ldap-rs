/* automatically generated by rust-bindgen */

pub type __int128_t = ::std::os::raw::c_void;
pub type __uint128_t = ::std::os::raw::c_void;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type ber_int_t = ::std::os::raw::c_int;
pub type ber_sint_t = ::std::os::raw::c_int;
pub type ber_uint_t = ::std::os::raw::c_uint;
pub type ber_tag_t = ::std::os::raw::c_ulong;
pub type ber_socket_t = ::std::os::raw::c_int;
pub type ber_len_t = ::std::os::raw::c_ulong;
pub type ber_slen_t = ::std::os::raw::c_long;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type BER_ERRNO_FN =
    ::std::option::Option<extern "C" fn() -> *mut ::std::os::raw::c_int>;
pub type BER_LOG_PRINT_FN =
    ::std::option::Option<unsafe extern "C" fn(buf:
                                                   *const ::std::os::raw::c_char)>;
pub type BER_MEMALLOC_FN =
    unsafe extern "C" fn(size: ber_len_t, ctx: *mut ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type BER_MEMCALLOC_FN =
    unsafe extern "C" fn(n: ber_len_t, size: ber_len_t,
                         ctx: *mut ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type BER_MEMREALLOC_FN =
    unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, size: ber_len_t,
                         ctx: *mut ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type BER_MEMFREE_FN =
    unsafe extern "C" fn(p: *mut ::std::os::raw::c_void,
                         ctx: *mut ::std::os::raw::c_void);
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lber_memory_fns {
    pub bmf_malloc: *mut BER_MEMALLOC_FN,
    pub bmf_calloc: *mut BER_MEMCALLOC_FN,
    pub bmf_realloc: *mut BER_MEMREALLOC_FN,
    pub bmf_free: *mut BER_MEMFREE_FN,
}
impl ::std::clone::Clone for Struct_lber_memory_fns {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lber_memory_fns {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BerMemoryFunctions = Struct_lber_memory_fns;
pub enum Struct_berelement { }
pub type BerElement = Struct_berelement;
pub enum Struct_sockbuf { }
pub type Sockbuf = Struct_sockbuf;
pub type Sockbuf_IO = Struct_sockbuf_io;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockbuf_io_desc {
    pub sbiod_level: ::std::os::raw::c_int,
    pub sbiod_sb: *mut Sockbuf,
    pub sbiod_io: *mut Sockbuf_IO,
    pub sbiod_pvt: *mut ::std::os::raw::c_void,
    pub sbiod_next: *mut Struct_sockbuf_io_desc,
}
impl ::std::clone::Clone for Struct_sockbuf_io_desc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockbuf_io_desc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Sockbuf_IO_Desc = Struct_sockbuf_io_desc;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockbuf_io {
    pub sbi_setup: ::std::option::Option<unsafe extern "C" fn(sbiod:
                                                                  *mut Sockbuf_IO_Desc,
                                                              arg:
                                                                  *mut ::std::os::raw::c_void)
                                             -> ::std::os::raw::c_int>,
    pub sbi_remove: ::std::option::Option<unsafe extern "C" fn(sbiod:
                                                                   *mut Sockbuf_IO_Desc)
                                              -> ::std::os::raw::c_int>,
    pub sbi_ctrl: ::std::option::Option<unsafe extern "C" fn(sbiod:
                                                                 *mut Sockbuf_IO_Desc,
                                                             opt:
                                                                 ::std::os::raw::c_int,
                                                             arg:
                                                                 *mut ::std::os::raw::c_void)
                                            -> ::std::os::raw::c_int>,
    pub sbi_read: ::std::option::Option<unsafe extern "C" fn(sbiod:
                                                                 *mut Sockbuf_IO_Desc,
                                                             buf:
                                                                 *mut ::std::os::raw::c_void,
                                                             len: ber_len_t)
                                            -> ber_slen_t>,
    pub sbi_write: ::std::option::Option<unsafe extern "C" fn(sbiod:
                                                                  *mut Sockbuf_IO_Desc,
                                                              buf:
                                                                  *mut ::std::os::raw::c_void,
                                                              len: ber_len_t)
                                             -> ber_slen_t>,
    pub sbi_close: ::std::option::Option<unsafe extern "C" fn(sbiod:
                                                                  *mut Sockbuf_IO_Desc)
                                             -> ::std::os::raw::c_int>,
}
impl ::std::clone::Clone for Struct_sockbuf_io {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockbuf_io {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_berval {
    pub bv_len: ber_len_t,
    pub bv_val: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_berval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_berval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BerValue = Struct_berval;
pub type BerVarray = *mut BerValue;
pub type BERDecodeCallback =
    ::std::option::Option<unsafe extern "C" fn(ber: *mut BerElement,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               mode: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type BEREncodeCallback =
    ::std::option::Option<unsafe extern "C" fn(ber: *mut BerElement,
                                               data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldapapiinfo {
    pub ldapai_info_version: ::std::os::raw::c_int,
    pub ldapai_api_version: ::std::os::raw::c_int,
    pub ldapai_protocol_version: ::std::os::raw::c_int,
    pub ldapai_extensions: *mut *mut ::std::os::raw::c_char,
    pub ldapai_vendor_name: *mut ::std::os::raw::c_char,
    pub ldapai_vendor_version: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_ldapapiinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldapapiinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPAPIInfo = Struct_ldapapiinfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldap_apifeature_info {
    pub ldapaif_info_version: ::std::os::raw::c_int,
    pub ldapaif_name: *mut ::std::os::raw::c_char,
    pub ldapaif_version: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_ldap_apifeature_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldap_apifeature_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPAPIFeatureInfo = Struct_ldap_apifeature_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldapcontrol {
    pub ldctl_oid: *mut ::std::os::raw::c_char,
    pub ldctl_value: Struct_berval,
    pub ldctl_iscritical: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_ldapcontrol {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldapcontrol {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPControl = Struct_ldapcontrol;
pub enum Struct_ldapmsg { }
pub type LDAPMessage = Struct_ldapmsg;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldapmod {
    pub mod_op: ::std::os::raw::c_int,
    pub mod_type: *mut ::std::os::raw::c_char,
    pub mod_vals: Union_mod_vals_u,
}
impl ::std::clone::Clone for Struct_ldapmod {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldapmod {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_mod_vals_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_mod_vals_u {
    pub unsafe fn modv_strvals(&mut self)
     -> *mut *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn modv_bvals(&mut self) -> *mut *mut *mut Struct_berval {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_mod_vals_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_mod_vals_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPMod = Struct_ldapmod;
pub enum Struct_ldap { }
pub type LDAP = Struct_ldap;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldap_url_desc {
    pub lud_next: *mut Struct_ldap_url_desc,
    pub lud_scheme: *mut ::std::os::raw::c_char,
    pub lud_host: *mut ::std::os::raw::c_char,
    pub lud_port: ::std::os::raw::c_int,
    pub lud_dn: *mut ::std::os::raw::c_char,
    pub lud_attrs: *mut *mut ::std::os::raw::c_char,
    pub lud_scope: ::std::os::raw::c_int,
    pub lud_filter: *mut ::std::os::raw::c_char,
    pub lud_exts: *mut *mut ::std::os::raw::c_char,
    pub lud_crit_exts: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_ldap_url_desc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldap_url_desc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPURLDesc = Struct_ldap_url_desc;
pub type ldap_sync_t = Struct_ldap_sync_t;
pub const LDAP_SYNC_CAPI_PRESENTS: Enum_Unnamed1 =
    Enum_Unnamed1::LDAP_SYNC_CAPI_PHASE_FLAG;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed1 {
    LDAP_SYNC_CAPI_NONE = -1,
    LDAP_SYNC_CAPI_PHASE_FLAG = 16,
    LDAP_SYNC_CAPI_IDSET_FLAG = 32,
    LDAP_SYNC_CAPI_DONE_FLAG = 64,
    LDAP_SYNC_CAPI_PRESENT = 0,
    LDAP_SYNC_CAPI_ADD = 1,
    LDAP_SYNC_CAPI_MODIFY = 2,
    LDAP_SYNC_CAPI_DELETE = 3,
    LDAP_SYNC_CAPI_DELETES = 19,
    LDAP_SYNC_CAPI_PRESENTS_IDSET = 48,
    LDAP_SYNC_CAPI_DELETES_IDSET = 51,
    LDAP_SYNC_CAPI_DONE = 80,
}
pub type ldap_sync_refresh_t = Enum_Unnamed1;
pub type ldap_sync_search_entry_f =
    ::std::option::Option<unsafe extern "C" fn(ls: *mut ldap_sync_t,
                                               msg: *mut LDAPMessage,
                                               entryUUID: *mut Struct_berval,
                                               phase: ldap_sync_refresh_t)
                              -> ::std::os::raw::c_int>;
pub type ldap_sync_search_reference_f =
    ::std::option::Option<unsafe extern "C" fn(ls: *mut ldap_sync_t,
                                               msg: *mut LDAPMessage)
                              -> ::std::os::raw::c_int>;
pub type ldap_sync_intermediate_f =
    ::std::option::Option<unsafe extern "C" fn(ls: *mut ldap_sync_t,
                                               msg: *mut LDAPMessage,
                                               syncUUIDs: BerVarray,
                                               phase: ldap_sync_refresh_t)
                              -> ::std::os::raw::c_int>;
pub type ldap_sync_search_result_f =
    ::std::option::Option<unsafe extern "C" fn(ls: *mut ldap_sync_t,
                                               msg: *mut LDAPMessage,
                                               refreshDeletes:
                                                   ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldap_sync_t {
    pub ls_base: *mut ::std::os::raw::c_char,
    pub ls_scope: ::std::os::raw::c_int,
    pub ls_filter: *mut ::std::os::raw::c_char,
    pub ls_attrs: *mut *mut ::std::os::raw::c_char,
    pub ls_timelimit: ::std::os::raw::c_int,
    pub ls_sizelimit: ::std::os::raw::c_int,
    pub ls_timeout: ::std::os::raw::c_int,
    pub ls_search_entry: ldap_sync_search_entry_f,
    pub ls_search_reference: ldap_sync_search_reference_f,
    pub ls_intermediate: ldap_sync_intermediate_f,
    pub ls_search_result: ldap_sync_search_result_f,
    pub ls_private: *mut ::std::os::raw::c_void,
    pub ls_ld: *mut LDAP,
    pub ls_msgid: ::std::os::raw::c_int,
    pub ls_reloadHint: ::std::os::raw::c_int,
    pub ls_cookie: Struct_berval,
    pub ls_refreshPhase: ldap_sync_refresh_t,
}
impl ::std::clone::Clone for Struct_ldap_sync_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldap_sync_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sockaddr { }
pub type ldap_conn_add_f =
    unsafe extern "C" fn(ld: *mut LDAP, sb: *mut Sockbuf,
                         srv: *mut LDAPURLDesc, addr: *mut Struct_sockaddr,
                         ctx: *mut Struct_ldap_conncb)
        -> ::std::os::raw::c_int;
pub type ldap_conn_del_f =
    unsafe extern "C" fn(ld: *mut LDAP, sb: *mut Sockbuf,
                         ctx: *mut Struct_ldap_conncb);
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldap_conncb {
    pub lc_add: *mut ldap_conn_add_f,
    pub lc_del: *mut ldap_conn_del_f,
    pub lc_arg: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_ldap_conncb {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldap_conncb {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldap_conncb = Struct_ldap_conncb;
pub enum Struct_timeval { }
pub type LDAP_REBIND_PROC =
    unsafe extern "C" fn(ld: *mut LDAP, url: *const ::std::os::raw::c_char,
                         request: ber_tag_t, msgid: ber_int_t,
                         params: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type LDAP_NEXTREF_PROC =
    unsafe extern "C" fn(ld: *mut LDAP,
                         refsp: *mut *mut *mut ::std::os::raw::c_char,
                         cntp: *mut ::std::os::raw::c_int,
                         params: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type LDAP_URLLIST_PROC =
    unsafe extern "C" fn(ld: *mut LDAP, urllist: *mut *mut LDAPURLDesc,
                         url: *mut *mut LDAPURLDesc,
                         params: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type LDAP_SASL_INTERACT_PROC =
    unsafe extern "C" fn(ld: *mut LDAP, flags: ::std::os::raw::c_uint,
                         defaults: *mut ::std::os::raw::c_void,
                         interact: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldap_ava {
    pub la_attr: Struct_berval,
    pub la_value: Struct_berval,
    pub la_flags: ::std::os::raw::c_uint,
    pub la_private: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_ldap_ava {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldap_ava {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPAVA = Struct_ldap_ava;
pub type LDAPRDN = *mut *mut LDAPAVA;
pub type LDAPDN = *mut LDAPRDN;
pub type LDAPDN_rewrite_func =
    unsafe extern "C" fn(dn: LDAPDN, flags: ::std::os::raw::c_uint,
                         ctx: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldapsortkey {
    pub attributeType: *mut ::std::os::raw::c_char,
    pub orderingRule: *mut ::std::os::raw::c_char,
    pub reverseOrder: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_ldapsortkey {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldapsortkey {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPSortKey = Struct_ldapsortkey;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ldapvlvinfo {
    pub ldvlv_version: ber_int_t,
    pub ldvlv_before_count: ber_int_t,
    pub ldvlv_after_count: ber_int_t,
    pub ldvlv_offset: ber_int_t,
    pub ldvlv_count: ber_int_t,
    pub ldvlv_attrvalue: *mut Struct_berval,
    pub ldvlv_context: *mut Struct_berval,
    pub ldvlv_extradata: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_ldapvlvinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ldapvlvinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPVLVInfo = Struct_ldapvlvinfo;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_passpolicyerror_enum {
    PP_passwordExpired = 0,
    PP_accountLocked = 1,
    PP_changeAfterReset = 2,
    PP_passwordModNotAllowed = 3,
    PP_mustSupplyOldPassword = 4,
    PP_insufficientPasswordQuality = 5,
    PP_passwordTooShort = 6,
    PP_passwordTooYoung = 7,
    PP_passwordInHistory = 8,
    PP_noError = 65535,
}
pub type LDAPPasswordPolicyError = Enum_passpolicyerror_enum;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_LDAPDerefSpec {
    pub derefAttr: *mut ::std::os::raw::c_char,
    pub attributes: *mut *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_LDAPDerefSpec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_LDAPDerefSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPDerefSpec = Struct_LDAPDerefSpec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_LDAPDerefVal {
    pub _type: *mut ::std::os::raw::c_char,
    pub vals: BerVarray,
    pub next: *mut Struct_LDAPDerefVal,
}
impl ::std::clone::Clone for Struct_LDAPDerefVal {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_LDAPDerefVal {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPDerefVal = Struct_LDAPDerefVal;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_LDAPDerefRes {
    pub derefAttr: *mut ::std::os::raw::c_char,
    pub derefVal: Struct_berval,
    pub attrVals: *mut LDAPDerefVal,
    pub next: *mut Struct_LDAPDerefRes,
}
impl ::std::clone::Clone for Struct_LDAPDerefRes {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_LDAPDerefRes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LDAPDerefRes = Struct_LDAPDerefRes;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "ldap")]
extern "C" {
    pub static mut ber_pvt_opt_on: ::std::os::raw::c_char;
    pub static mut ber_sockbuf_io_tcp: Sockbuf_IO;
    pub static mut ber_sockbuf_io_readahead: Sockbuf_IO;
    pub static mut ber_sockbuf_io_fd: Sockbuf_IO;
    pub static mut ber_sockbuf_io_debug: Sockbuf_IO;
    pub static mut ber_sockbuf_io_udp: Sockbuf_IO;
}
#[link(name = "ldap")]
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> size_t;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char) -> size_t;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char) -> size_t;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn ber_error_print(data: *const ::std::os::raw::c_char);
    pub fn ber_bprint(data: *const ::std::os::raw::c_char, len: ber_len_t);
    pub fn ber_dump(ber: *mut BerElement, inout: ::std::os::raw::c_int);
    pub fn ber_get_tag(ber: *mut BerElement) -> ber_tag_t;
    pub fn ber_skip_tag(ber: *mut BerElement, len: *mut ber_len_t)
     -> ber_tag_t;
    pub fn ber_peek_tag(ber: *mut BerElement, len: *mut ber_len_t)
     -> ber_tag_t;
    pub fn ber_skip_element(ber: *mut BerElement, bv: *mut Struct_berval)
     -> ber_tag_t;
    pub fn ber_peek_element(ber: *const BerElement, bv: *mut Struct_berval)
     -> ber_tag_t;
    pub fn ber_get_int(ber: *mut BerElement, num: *mut ber_int_t)
     -> ber_tag_t;
    pub fn ber_get_enum(ber: *mut BerElement, num: *mut ber_int_t)
     -> ber_tag_t;
    pub fn ber_get_stringb(ber: *mut BerElement,
                           buf: *mut ::std::os::raw::c_char,
                           len: *mut ber_len_t) -> ber_tag_t;
    pub fn ber_get_stringbv(ber: *mut BerElement, bv: *mut Struct_berval,
                            options: ::std::os::raw::c_int) -> ber_tag_t;
    pub fn ber_get_stringa(ber: *mut BerElement,
                           buf: *mut *mut ::std::os::raw::c_char)
     -> ber_tag_t;
    pub fn ber_get_stringal(ber: *mut BerElement, bv: *mut *mut Struct_berval)
     -> ber_tag_t;
    pub fn ber_get_bitstringa(ber: *mut BerElement,
                              buf: *mut *mut ::std::os::raw::c_char,
                              len: *mut ber_len_t) -> ber_tag_t;
    pub fn ber_get_null(ber: *mut BerElement) -> ber_tag_t;
    pub fn ber_get_boolean(ber: *mut BerElement, boolval: *mut ber_int_t)
     -> ber_tag_t;
    pub fn ber_first_element(ber: *mut BerElement, len: *mut ber_len_t,
                             last: *mut *mut ::std::os::raw::c_char)
     -> ber_tag_t;
    pub fn ber_next_element(ber: *mut BerElement, len: *mut ber_len_t,
                            last: *const ::std::os::raw::c_char) -> ber_tag_t;
    pub fn ber_scanf(ber: *mut BerElement,
                     fmt: *const ::std::os::raw::c_char, ...) -> ber_tag_t;
    pub fn ber_decode_oid(_in: *mut Struct_berval, out: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ber_encode_oid(_in: *mut Struct_berval, out: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ber_put_enum(ber: *mut BerElement, num: ber_int_t, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_put_int(ber: *mut BerElement, num: ber_int_t, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_put_ostring(ber: *mut BerElement,
                           str: *const ::std::os::raw::c_char, len: ber_len_t,
                           tag: ber_tag_t) -> ::std::os::raw::c_int;
    pub fn ber_put_berval(ber: *mut BerElement, bv: *mut Struct_berval,
                          tag: ber_tag_t) -> ::std::os::raw::c_int;
    pub fn ber_put_string(ber: *mut BerElement,
                          str: *const ::std::os::raw::c_char, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_put_bitstring(ber: *mut BerElement,
                             str: *const ::std::os::raw::c_char,
                             bitlen: ber_len_t, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_put_null(ber: *mut BerElement, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_put_boolean(ber: *mut BerElement, boolval: ber_int_t,
                           tag: ber_tag_t) -> ::std::os::raw::c_int;
    pub fn ber_start_seq(ber: *mut BerElement, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_start_set(ber: *mut BerElement, tag: ber_tag_t)
     -> ::std::os::raw::c_int;
    pub fn ber_put_seq(ber: *mut BerElement) -> ::std::os::raw::c_int;
    pub fn ber_put_set(ber: *mut BerElement) -> ::std::os::raw::c_int;
    pub fn ber_printf(ber: *mut BerElement,
                      fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn ber_skip_data(ber: *mut BerElement, len: ber_len_t) -> ber_slen_t;
    pub fn ber_read(ber: *mut BerElement, buf: *mut ::std::os::raw::c_char,
                    len: ber_len_t) -> ber_slen_t;
    pub fn ber_write(ber: *mut BerElement, buf: *const ::std::os::raw::c_char,
                     len: ber_len_t, zero: ::std::os::raw::c_int)
     -> ber_slen_t;
    pub fn ber_free(ber: *mut BerElement, freebuf: ::std::os::raw::c_int);
    pub fn ber_free_buf(ber: *mut BerElement);
    pub fn ber_flush2(sb: *mut Sockbuf, ber: *mut BerElement,
                      freeit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ber_flush(sb: *mut Sockbuf, ber: *mut BerElement,
                     freeit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ber_alloc() -> *mut BerElement;
    pub fn der_alloc() -> *mut BerElement;
    pub fn ber_alloc_t(beroptions: ::std::os::raw::c_int) -> *mut BerElement;
    pub fn ber_dup(ber: *mut BerElement) -> *mut BerElement;
    pub fn ber_get_next(sb: *mut Sockbuf, len: *mut ber_len_t,
                        ber: *mut BerElement) -> ber_tag_t;
    pub fn ber_init2(ber: *mut BerElement, bv: *mut Struct_berval,
                     options: ::std::os::raw::c_int);
    pub fn ber_init_w_nullc(ber: *mut BerElement,
                            options: ::std::os::raw::c_int);
    pub fn ber_reset(ber: *mut BerElement,
                     was_writing: ::std::os::raw::c_int);
    pub fn ber_init(bv: *mut Struct_berval) -> *mut BerElement;
    pub fn ber_flatten(ber: *mut BerElement, bvPtr: *mut *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ber_flatten2(ber: *mut BerElement, bv: *mut Struct_berval,
                        alloc: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ber_remaining(ber: *mut BerElement) -> ::std::os::raw::c_int;
    pub fn ber_get_option(item: *mut ::std::os::raw::c_void,
                          option: ::std::os::raw::c_int,
                          outvalue: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ber_set_option(item: *mut ::std::os::raw::c_void,
                          option: ::std::os::raw::c_int,
                          invalue: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ber_sockbuf_alloc() -> *mut Sockbuf;
    pub fn ber_sockbuf_free(sb: *mut Sockbuf);
    pub fn ber_sockbuf_add_io(sb: *mut Sockbuf, sbio: *mut Sockbuf_IO,
                              layer: ::std::os::raw::c_int,
                              arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ber_sockbuf_remove_io(sb: *mut Sockbuf, sbio: *mut Sockbuf_IO,
                                 layer: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ber_sockbuf_ctrl(sb: *mut Sockbuf, opt: ::std::os::raw::c_int,
                            arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ber_memalloc(s: ber_len_t) -> *mut ::std::os::raw::c_void;
    pub fn ber_memrealloc(p: *mut ::std::os::raw::c_void, s: ber_len_t)
     -> *mut ::std::os::raw::c_void;
    pub fn ber_memcalloc(n: ber_len_t, s: ber_len_t)
     -> *mut ::std::os::raw::c_void;
    pub fn ber_memfree(p: *mut ::std::os::raw::c_void);
    pub fn ber_memvfree(vector: *mut *mut ::std::os::raw::c_void);
    pub fn ber_bvfree(bv: *mut Struct_berval);
    pub fn ber_bvecfree(bv: *mut *mut Struct_berval);
    pub fn ber_bvecadd(bvec: *mut *mut *mut Struct_berval,
                       bv: *mut Struct_berval) -> ::std::os::raw::c_int;
    pub fn ber_dupbv(dst: *mut Struct_berval, src: *mut Struct_berval)
     -> *mut Struct_berval;
    pub fn ber_bvdup(src: *mut Struct_berval) -> *mut Struct_berval;
    pub fn ber_mem2bv(arg1: *const ::std::os::raw::c_char, len: ber_len_t,
                      duplicate: ::std::os::raw::c_int,
                      bv: *mut Struct_berval) -> *mut Struct_berval;
    pub fn ber_str2bv(arg1: *const ::std::os::raw::c_char, len: ber_len_t,
                      duplicate: ::std::os::raw::c_int,
                      bv: *mut Struct_berval) -> *mut Struct_berval;
    pub fn ber_strdup(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ber_strnlen(s: *const ::std::os::raw::c_char, len: ber_len_t)
     -> ber_len_t;
    pub fn ber_strndup(s: *const ::std::os::raw::c_char, l: ber_len_t)
     -> *mut ::std::os::raw::c_char;
    pub fn ber_bvreplace(dst: *mut Struct_berval, src: *const Struct_berval)
     -> *mut Struct_berval;
    pub fn ber_bvarray_free(p: BerVarray);
    pub fn ber_bvarray_add(p: *mut BerVarray, bv: *mut BerValue)
     -> ::std::os::raw::c_int;
    pub fn ber_errno_addr() -> *mut ::std::os::raw::c_int;
    pub fn ldap_get_option(ld: *mut LDAP, option: ::std::os::raw::c_int,
                           outvalue: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ldap_set_option(ld: *mut LDAP, option: ::std::os::raw::c_int,
                           invalue: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ldap_set_rebind_proc(ld: *mut LDAP,
                                rebind_proc: *mut LDAP_REBIND_PROC,
                                params: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ldap_set_nextref_proc(ld: *mut LDAP,
                                 nextref_proc: *mut LDAP_NEXTREF_PROC,
                                 params: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ldap_set_urllist_proc(ld: *mut LDAP,
                                 urllist_proc: *mut LDAP_URLLIST_PROC,
                                 params: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ldap_control_create(requestOID: *const ::std::os::raw::c_char,
                               iscritical: ::std::os::raw::c_int,
                               value: *mut Struct_berval,
                               dupval: ::std::os::raw::c_int,
                               ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_control_find(oid: *const ::std::os::raw::c_char,
                             ctrls: *mut *mut LDAPControl,
                             nextctrlp: *mut *mut *mut LDAPControl)
     -> *mut LDAPControl;
    pub fn ldap_control_free(ctrl: *mut LDAPControl);
    pub fn ldap_controls_free(ctrls: *mut *mut LDAPControl);
    pub fn ldap_controls_dup(controls: *const *mut LDAPControl)
     -> *mut *mut LDAPControl;
    pub fn ldap_control_dup(c: *const LDAPControl) -> *mut LDAPControl;
    pub fn ldap_domain2dn(domain: *const ::std::os::raw::c_char,
                          dn: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_dn2domain(dn: *const ::std::os::raw::c_char,
                          domain: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_domain2hostlist(domain: *const ::std::os::raw::c_char,
                                hostlist: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_extended_operation(ld: *mut LDAP,
                                   reqoid: *const ::std::os::raw::c_char,
                                   reqdata: *mut Struct_berval,
                                   serverctrls: *mut *mut LDAPControl,
                                   clientctrls: *mut *mut LDAPControl,
                                   msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_extended_operation_s(ld: *mut LDAP,
                                     reqoid: *const ::std::os::raw::c_char,
                                     reqdata: *mut Struct_berval,
                                     serverctrls: *mut *mut LDAPControl,
                                     clientctrls: *mut *mut LDAPControl,
                                     retoidp:
                                         *mut *mut ::std::os::raw::c_char,
                                     retdatap: *mut *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_extended_result(ld: *mut LDAP, res: *mut LDAPMessage,
                                      retoidp:
                                          *mut *mut ::std::os::raw::c_char,
                                      retdatap: *mut *mut Struct_berval,
                                      freeit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_intermediate(ld: *mut LDAP, res: *mut LDAPMessage,
                                   retoidp: *mut *mut ::std::os::raw::c_char,
                                   retdatap: *mut *mut Struct_berval,
                                   serverctrls: *mut *mut *mut LDAPControl,
                                   freeit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_abandon_ext(ld: *mut LDAP, msgid: ::std::os::raw::c_int,
                            serverctrls: *mut *mut LDAPControl,
                            clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_add_ext(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                        attrs: *mut *mut LDAPMod,
                        serverctrls: *mut *mut LDAPControl,
                        clientctrls: *mut *mut LDAPControl,
                        msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_add_ext_s(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                          attrs: *mut *mut LDAPMod,
                          serverctrls: *mut *mut LDAPControl,
                          clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_sasl_bind(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                          mechanism: *const ::std::os::raw::c_char,
                          cred: *mut Struct_berval,
                          serverctrls: *mut *mut LDAPControl,
                          clientctrls: *mut *mut LDAPControl,
                          msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_sasl_interactive_bind(ld: *mut LDAP,
                                      dn: *const ::std::os::raw::c_char,
                                      saslMechanism:
                                          *const ::std::os::raw::c_char,
                                      serverControls: *mut *mut LDAPControl,
                                      clientControls: *mut *mut LDAPControl,
                                      flags: ::std::os::raw::c_uint,
                                      _proc: *mut LDAP_SASL_INTERACT_PROC,
                                      defaults: *mut ::std::os::raw::c_void,
                                      result: *mut LDAPMessage,
                                      rmech:
                                          *mut *const ::std::os::raw::c_char,
                                      msgid: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_sasl_interactive_bind_s(ld: *mut LDAP,
                                        dn: *const ::std::os::raw::c_char,
                                        saslMechanism:
                                            *const ::std::os::raw::c_char,
                                        serverControls: *mut *mut LDAPControl,
                                        clientControls: *mut *mut LDAPControl,
                                        flags: ::std::os::raw::c_uint,
                                        _proc: *mut LDAP_SASL_INTERACT_PROC,
                                        defaults: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ldap_sasl_bind_s(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                            mechanism: *const ::std::os::raw::c_char,
                            cred: *mut Struct_berval,
                            serverctrls: *mut *mut LDAPControl,
                            clientctrls: *mut *mut LDAPControl,
                            servercredp: *mut *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_sasl_bind_result(ld: *mut LDAP, res: *mut LDAPMessage,
                                       servercredp: *mut *mut Struct_berval,
                                       freeit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_compare_ext(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                            attr: *const ::std::os::raw::c_char,
                            bvalue: *mut Struct_berval,
                            serverctrls: *mut *mut LDAPControl,
                            clientctrls: *mut *mut LDAPControl,
                            msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_compare_ext_s(ld: *mut LDAP,
                              dn: *const ::std::os::raw::c_char,
                              attr: *const ::std::os::raw::c_char,
                              bvalue: *mut Struct_berval,
                              serverctrls: *mut *mut LDAPControl,
                              clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_delete_ext(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                           serverctrls: *mut *mut LDAPControl,
                           clientctrls: *mut *mut LDAPControl,
                           msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_delete_ext_s(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                             serverctrls: *mut *mut LDAPControl,
                             clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_result(ld: *mut LDAP, res: *mut LDAPMessage,
                             errcodep: *mut ::std::os::raw::c_int,
                             matcheddnp: *mut *mut ::std::os::raw::c_char,
                             errmsgp: *mut *mut ::std::os::raw::c_char,
                             referralsp:
                                 *mut *mut *mut ::std::os::raw::c_char,
                             serverctrls: *mut *mut *mut LDAPControl,
                             freeit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_err2string(err: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_gssapi_bind(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                            creds: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_gssapi_bind_s(ld: *mut LDAP,
                              dn: *const ::std::os::raw::c_char,
                              creds: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_modify_ext(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                           mods: *mut *mut LDAPMod,
                           serverctrls: *mut *mut LDAPControl,
                           clientctrls: *mut *mut LDAPControl,
                           msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_modify_ext_s(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                             mods: *mut *mut LDAPMod,
                             serverctrls: *mut *mut LDAPControl,
                             clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_rename(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                       newrdn: *const ::std::os::raw::c_char,
                       newSuperior: *const ::std::os::raw::c_char,
                       deleteoldrdn: ::std::os::raw::c_int,
                       sctrls: *mut *mut LDAPControl,
                       cctrls: *mut *mut LDAPControl,
                       msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_rename_s(ld: *mut LDAP, dn: *const ::std::os::raw::c_char,
                         newrdn: *const ::std::os::raw::c_char,
                         newSuperior: *const ::std::os::raw::c_char,
                         deleteoldrdn: ::std::os::raw::c_int,
                         sctrls: *mut *mut LDAPControl,
                         cctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_create(ldp: *mut *mut LDAP) -> ::std::os::raw::c_int;
    pub fn ldap_initialize(ldp: *mut *mut LDAP,
                           url: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_dup(old: *mut LDAP) -> *mut LDAP;
    pub fn ldap_tls_inplace(ld: *mut LDAP) -> ::std::os::raw::c_int;
    pub fn ldap_start_tls(ld: *mut LDAP, serverctrls: *mut *mut LDAPControl,
                          clientctrls: *mut *mut LDAPControl,
                          msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_install_tls(ld: *mut LDAP) -> ::std::os::raw::c_int;
    pub fn ldap_start_tls_s(ld: *mut LDAP, serverctrls: *mut *mut LDAPControl,
                            clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_first_message(ld: *mut LDAP, chain: *mut LDAPMessage)
     -> *mut LDAPMessage;
    pub fn ldap_next_message(ld: *mut LDAP, msg: *mut LDAPMessage)
     -> *mut LDAPMessage;
    pub fn ldap_count_messages(ld: *mut LDAP, chain: *mut LDAPMessage)
     -> ::std::os::raw::c_int;
    pub fn ldap_first_reference(ld: *mut LDAP, chain: *mut LDAPMessage)
     -> *mut LDAPMessage;
    pub fn ldap_next_reference(ld: *mut LDAP, _ref: *mut LDAPMessage)
     -> *mut LDAPMessage;
    pub fn ldap_count_references(ld: *mut LDAP, chain: *mut LDAPMessage)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_reference(ld: *mut LDAP, _ref: *mut LDAPMessage,
                                referralsp:
                                    *mut *mut *mut ::std::os::raw::c_char,
                                serverctrls: *mut *mut *mut LDAPControl,
                                freeit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_first_entry(ld: *mut LDAP, chain: *mut LDAPMessage)
     -> *mut LDAPMessage;
    pub fn ldap_next_entry(ld: *mut LDAP, entry: *mut LDAPMessage)
     -> *mut LDAPMessage;
    pub fn ldap_count_entries(ld: *mut LDAP, chain: *mut LDAPMessage)
     -> ::std::os::raw::c_int;
    pub fn ldap_get_entry_controls(ld: *mut LDAP, entry: *mut LDAPMessage,
                                   serverctrls: *mut *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_delete_result_entry(list: *mut *mut LDAPMessage,
                                    e: *mut LDAPMessage) -> *mut LDAPMessage;
    pub fn ldap_add_result_entry(list: *mut *mut LDAPMessage,
                                 e: *mut LDAPMessage);
    pub fn ldap_get_dn(ld: *mut LDAP, entry: *mut LDAPMessage)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_rdnfree(rdn: LDAPRDN);
    pub fn ldap_dnfree(dn: LDAPDN);
    pub fn ldap_bv2dn(bv: *mut Struct_berval, dn: *mut LDAPDN,
                      flags: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn ldap_str2dn(str: *const ::std::os::raw::c_char, dn: *mut LDAPDN,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_dn2bv(dn: LDAPDN, bv: *mut Struct_berval,
                      flags: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn ldap_dn2str(dn: LDAPDN, str: *mut *mut ::std::os::raw::c_char,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_bv2rdn(bv: *mut Struct_berval, rdn: *mut LDAPRDN,
                       next: *mut *mut ::std::os::raw::c_char,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_str2rdn(str: *const ::std::os::raw::c_char, rdn: *mut LDAPRDN,
                        next: *mut *mut ::std::os::raw::c_char,
                        flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_rdn2bv(rdn: LDAPRDN, bv: *mut Struct_berval,
                       flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_rdn2str(rdn: LDAPRDN, str: *mut *mut ::std::os::raw::c_char,
                        flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_dn_normalize(_in: *const ::std::os::raw::c_char,
                             iflags: ::std::os::raw::c_uint,
                             out: *mut *mut ::std::os::raw::c_char,
                             oflags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_dn2ufn(dn: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_explode_dn(dn: *const ::std::os::raw::c_char,
                           notypes: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
    pub fn ldap_explode_rdn(rdn: *const ::std::os::raw::c_char,
                            notypes: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
    pub fn ldap_X509dn2bv(x509_name: *mut ::std::os::raw::c_void,
                          dn: *mut Struct_berval,
                          func:
                              *mut ::std::option::Option<extern "C" fn()
                                                             ->
                                                                 ::std::os::raw::c_int>,
                          flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn ldap_dn2dcedn(dn: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_dcedn2dn(dce: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_dn2ad_canonical(dn: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_get_dn_ber(ld: *mut LDAP, e: *mut LDAPMessage,
                           berout: *mut *mut BerElement,
                           dn: *mut Struct_berval) -> ::std::os::raw::c_int;
    pub fn ldap_get_attribute_ber(ld: *mut LDAP, e: *mut LDAPMessage,
                                  ber: *mut BerElement,
                                  attr: *mut Struct_berval,
                                  vals: *mut *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_first_attribute(ld: *mut LDAP, entry: *mut LDAPMessage,
                                ber: *mut *mut BerElement)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_next_attribute(ld: *mut LDAP, entry: *mut LDAPMessage,
                               ber: *mut BerElement)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_get_values_len(ld: *mut LDAP, entry: *mut LDAPMessage,
                               target: *const ::std::os::raw::c_char)
     -> *mut *mut Struct_berval;
    pub fn ldap_count_values_len(vals: *mut *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_value_free_len(vals: *mut *mut Struct_berval);
    pub fn ldap_result(ld: *mut LDAP, msgid: ::std::os::raw::c_int,
                       all: ::std::os::raw::c_int,
                       timeout: *mut Struct_timeval,
                       result: *mut *mut LDAPMessage)
     -> ::std::os::raw::c_int;
    pub fn ldap_msgtype(lm: *mut LDAPMessage) -> ::std::os::raw::c_int;
    pub fn ldap_msgid(lm: *mut LDAPMessage) -> ::std::os::raw::c_int;
    pub fn ldap_msgfree(lm: *mut LDAPMessage) -> ::std::os::raw::c_int;
    pub fn ldap_msgdelete(ld: *mut LDAP, msgid: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_bv2escaped_filter_value(_in: *mut Struct_berval,
                                        out: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_search_ext(ld: *mut LDAP, base: *const ::std::os::raw::c_char,
                           scope: ::std::os::raw::c_int,
                           filter: *const ::std::os::raw::c_char,
                           attrs: *mut *mut ::std::os::raw::c_char,
                           attrsonly: ::std::os::raw::c_int,
                           serverctrls: *mut *mut LDAPControl,
                           clientctrls: *mut *mut LDAPControl,
                           timeout: *mut Struct_timeval,
                           sizelimit: ::std::os::raw::c_int,
                           msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_search_ext_s(ld: *mut LDAP,
                             base: *const ::std::os::raw::c_char,
                             scope: ::std::os::raw::c_int,
                             filter: *const ::std::os::raw::c_char,
                             attrs: *mut *mut ::std::os::raw::c_char,
                             attrsonly: ::std::os::raw::c_int,
                             serverctrls: *mut *mut LDAPControl,
                             clientctrls: *mut *mut LDAPControl,
                             timeout: *mut Struct_timeval,
                             sizelimit: ::std::os::raw::c_int,
                             res: *mut *mut LDAPMessage)
     -> ::std::os::raw::c_int;
    pub fn ldap_unbind_ext(ld: *mut LDAP, serverctrls: *mut *mut LDAPControl,
                           clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_unbind_ext_s(ld: *mut LDAP,
                             serverctrls: *mut *mut LDAPControl,
                             clientctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_destroy(ld: *mut LDAP) -> ::std::os::raw::c_int;
    pub fn ldap_put_vrFilter(ber: *mut BerElement,
                             vrf: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_memalloc(s: ber_len_t) -> *mut ::std::os::raw::c_void;
    pub fn ldap_memrealloc(p: *mut ::std::os::raw::c_void, s: ber_len_t)
     -> *mut ::std::os::raw::c_void;
    pub fn ldap_memcalloc(n: ber_len_t, s: ber_len_t)
     -> *mut ::std::os::raw::c_void;
    pub fn ldap_memfree(p: *mut ::std::os::raw::c_void);
    pub fn ldap_memvfree(v: *mut *mut ::std::os::raw::c_void);
    pub fn ldap_strdup(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_mods_free(mods: *mut *mut LDAPMod,
                          freemods: ::std::os::raw::c_int);
    pub fn ldap_is_ldap_url(url: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_is_ldaps_url(url: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_is_ldapi_url(url: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_url_parse(url: *const ::std::os::raw::c_char,
                          ludpp: *mut *mut LDAPURLDesc)
     -> ::std::os::raw::c_int;
    pub fn ldap_url_desc2str(ludp: *mut LDAPURLDesc)
     -> *mut ::std::os::raw::c_char;
    pub fn ldap_free_urldesc(ludp: *mut LDAPURLDesc);
    pub fn ldap_cancel(ld: *mut LDAP, cancelid: ::std::os::raw::c_int,
                       sctrls: *mut *mut LDAPControl,
                       cctrls: *mut *mut LDAPControl,
                       msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_cancel_s(ld: *mut LDAP, cancelid: ::std::os::raw::c_int,
                         sctrl: *mut *mut LDAPControl,
                         cctrl: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_turn(ld: *mut LDAP, mutual: ::std::os::raw::c_int,
                     identifier: *const ::std::os::raw::c_char,
                     sctrls: *mut *mut LDAPControl,
                     cctrls: *mut *mut LDAPControl,
                     msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_turn_s(ld: *mut LDAP, mutual: ::std::os::raw::c_int,
                       identifier: *const ::std::os::raw::c_char,
                       sctrl: *mut *mut LDAPControl,
                       cctrl: *mut *mut LDAPControl) -> ::std::os::raw::c_int;
    pub fn ldap_create_page_control_value(ld: *mut LDAP, pagesize: ber_int_t,
                                          cookie: *mut Struct_berval,
                                          value: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_page_control(ld: *mut LDAP, pagesize: ber_int_t,
                                    cookie: *mut Struct_berval,
                                    iscritical: ::std::os::raw::c_int,
                                    ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_pageresponse_control(ld: *mut LDAP,
                                           ctrl: *mut LDAPControl,
                                           count: *mut ber_int_t,
                                           cookie: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_sort_keylist(sortKeyList: *mut *mut *mut LDAPSortKey,
                                    keyString: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_free_sort_keylist(sortkeylist: *mut *mut LDAPSortKey);
    pub fn ldap_create_sort_control_value(ld: *mut LDAP,
                                          keyList: *mut *mut LDAPSortKey,
                                          value: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_sort_control(ld: *mut LDAP,
                                    keyList: *mut *mut LDAPSortKey,
                                    iscritical: ::std::os::raw::c_int,
                                    ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_sortresponse_control(ld: *mut LDAP,
                                           ctrl: *mut LDAPControl,
                                           result: *mut ber_int_t,
                                           attribute:
                                               *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_vlv_control_value(ld: *mut LDAP,
                                         ldvlistp: *mut LDAPVLVInfo,
                                         value: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_vlv_control(ld: *mut LDAP, ldvlistp: *mut LDAPVLVInfo,
                                   ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_vlvresponse_control(ld: *mut LDAP,
                                          ctrls: *mut LDAPControl,
                                          target_posp: *mut ber_int_t,
                                          list_countp: *mut ber_int_t,
                                          contextp: *mut *mut Struct_berval,
                                          errcodep:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_whoami(ld: *mut LDAP, res: *mut LDAPMessage,
                             authzid: *mut *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_whoami(ld: *mut LDAP, sctrls: *mut *mut LDAPControl,
                       cctrls: *mut *mut LDAPControl,
                       msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_whoami_s(ld: *mut LDAP, authzid: *mut *mut Struct_berval,
                         sctrls: *mut *mut LDAPControl,
                         cctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_passwd(ld: *mut LDAP, res: *mut LDAPMessage,
                             newpasswd: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_passwd(ld: *mut LDAP, user: *mut Struct_berval,
                       oldpw: *mut Struct_berval, newpw: *mut Struct_berval,
                       sctrls: *mut *mut LDAPControl,
                       cctrls: *mut *mut LDAPControl,
                       msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_passwd_s(ld: *mut LDAP, user: *mut Struct_berval,
                         oldpw: *mut Struct_berval, newpw: *mut Struct_berval,
                         newpasswd: *mut Struct_berval,
                         sctrls: *mut *mut LDAPControl,
                         cctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_passwordpolicy_control(ld: *mut LDAP,
                                              ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_passwordpolicy_control(ld: *mut LDAP,
                                             ctrl: *mut LDAPControl,
                                             expirep: *mut ber_int_t,
                                             gracep: *mut ber_int_t,
                                             errorp:
                                                 *mut LDAPPasswordPolicyError)
     -> ::std::os::raw::c_int;
    pub fn ldap_passwordpolicy_err2txt(arg1: LDAPPasswordPolicyError)
     -> *const ::std::os::raw::c_char;
    pub fn ldap_parse_refresh(ld: *mut LDAP, res: *mut LDAPMessage,
                              newttl: *mut ber_int_t)
     -> ::std::os::raw::c_int;
    pub fn ldap_refresh(ld: *mut LDAP, dn: *mut Struct_berval, ttl: ber_int_t,
                        sctrls: *mut *mut LDAPControl,
                        cctrls: *mut *mut LDAPControl,
                        msgidp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_refresh_s(ld: *mut LDAP, dn: *mut Struct_berval,
                          ttl: ber_int_t, newttl: *mut ber_int_t,
                          sctrls: *mut *mut LDAPControl,
                          cctrls: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_sync_initialize(ls: *mut ldap_sync_t) -> *mut ldap_sync_t;
    pub fn ldap_sync_destroy(ls: *mut ldap_sync_t,
                             freeit: ::std::os::raw::c_int);
    pub fn ldap_sync_init(ls: *mut ldap_sync_t, mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ldap_sync_init_refresh_only(ls: *mut ldap_sync_t)
     -> ::std::os::raw::c_int;
    pub fn ldap_sync_init_refresh_and_persist(ls: *mut ldap_sync_t)
     -> ::std::os::raw::c_int;
    pub fn ldap_sync_poll(ls: *mut ldap_sync_t) -> ::std::os::raw::c_int;
    pub fn ldap_create_session_tracking_value(ld: *mut LDAP,
                                              sessionSourceIp:
                                                  *mut ::std::os::raw::c_char,
                                              sessionSourceName:
                                                  *mut ::std::os::raw::c_char,
                                              formatOID:
                                                  *mut ::std::os::raw::c_char,
                                              sessionTrackingIdentifier:
                                                  *mut Struct_berval,
                                              value: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_session_tracking_control(ld: *mut LDAP,
                                                sessionSourceIp:
                                                    *mut ::std::os::raw::c_char,
                                                sessionSourceName:
                                                    *mut ::std::os::raw::c_char,
                                                formatOID:
                                                    *mut ::std::os::raw::c_char,
                                                sessionTrackingIdentifier:
                                                    *mut Struct_berval,
                                                ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_session_tracking_control(ld: *mut LDAP,
                                               ctrl: *mut LDAPControl,
                                               ip: *mut Struct_berval,
                                               name: *mut Struct_berval,
                                               oid: *mut Struct_berval,
                                               id: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_assertion_control_value(ld: *mut LDAP,
                                               assertion:
                                                   *mut ::std::os::raw::c_char,
                                               value: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_assertion_control(ld: *mut LDAP,
                                         filter: *mut ::std::os::raw::c_char,
                                         iscritical: ::std::os::raw::c_int,
                                         ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_deref_control_value(ld: *mut LDAP,
                                           ds: *mut LDAPDerefSpec,
                                           value: *mut Struct_berval)
     -> ::std::os::raw::c_int;
    pub fn ldap_create_deref_control(ld: *mut LDAP, ds: *mut LDAPDerefSpec,
                                     iscritical: ::std::os::raw::c_int,
                                     ctrlp: *mut *mut LDAPControl)
     -> ::std::os::raw::c_int;
    pub fn ldap_derefresponse_free(dr: *mut LDAPDerefRes);
    pub fn ldap_parse_derefresponse_control(ld: *mut LDAP,
                                            ctrl: *mut LDAPControl,
                                            drp: *mut *mut LDAPDerefRes)
     -> ::std::os::raw::c_int;
    pub fn ldap_parse_deref_control(ld: *mut LDAP,
                                    ctrls: *mut *mut LDAPControl,
                                    drp: *mut *mut LDAPDerefRes)
     -> ::std::os::raw::c_int;
}
